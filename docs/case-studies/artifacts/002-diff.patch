diff --git a/src/core/server.py b/src/core/server.py
index 0000000..1111111 100644
--- a/src/core/server.py
+++ b/src/core/server.py
@@
-# TODO: rate limiting
+# Added token-bucket rate limiting middleware that protects unauthenticated routes.
@@
-from fastapi import FastAPI
+from fastapi import FastAPI, Request
+
+# simple in-memory limiter (placeholder for Redis-backed implementation)
+class _TokenBucket:
+    def __init__(self, capacity: int, refill_rate: float):
+        self.capacity = capacity
+        self.refill_rate = refill_rate
+        self.tokens = capacity
+        self.timestamp = time.monotonic()
+
+    def allow(self) -> bool:
+        now = time.monotonic()
+        elapsed = now - self.timestamp
+        self.timestamp = now
+        self.tokens = min(self.capacity, self.tokens + elapsed * self.refill_rate)
+        if self.tokens >= 1:
+            self.tokens -= 1
+            return True
+        return False
+
+limiters = defaultdict(lambda: _TokenBucket(capacity=60, refill_rate=1.0))
+
+async def rate_limit_middleware(request: Request, call_next):
+    key = request.client.host if request.client else "anonymous"
+    if not limiters[key].allow():
+        return JSONResponse(status_code=429, content={"detail": "Rate limit exceeded"})
+    response = await call_next(request)
+    response.headers.setdefault("X-RateLimit-Limit", "60")
+    return response
*** End Patch